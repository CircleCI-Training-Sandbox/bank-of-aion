version: 2.1

orbs:
  compass: atlassian-labs/compass@0.1.2
  ggshield: gitguardian/ggshield@1.1.4
  maven: circleci/maven@1.3.0
  snyk: snyk/snyk@1.4.0
          
executors:
  with-chrome:
    docker:
      - image: 'cypress/browsers:node14.16.0-chrome90-ff88'
  base:
    docker:
      - image: cimg/deploy:2022.08
  jdk17:
    docker:
      - image: cimg/openjdk:17.0.3
    
    resource_class: xlarge
  python38:
    docker:
      - image: cimg/python:3.8

workflows:
  main:
    jobs:
      - ggshield/scan:
          name: secrets_detection
          revision: $CIRCLE_SHA1
          context:
            - reference-arch-aws-oidc
      - java_static_analysis:
          context:
            - reference-arch-aws-oidc
          matrix:
            parameters:
              target-file:
                - src/ledgerwriter/pom.xml
                - src/transactionhistory/pom.xml
                - src/balancereader/pom.xml
                - src/ledgermonolith/pom.xml
      - python_static_analysis:
          context:
            - reference-arch-aws-oidc
          matrix:
            parameters:
              target-file:
                - src/userservice/requirements.txt
                - src/contacts/requirements.txt
                - src/frontend/requirements.txt
      - java-checkstyle
      - python-checkstyle
      - java-test-and-code-cov:
          requires: [ secrets_detection, java_static_analysis, java-checkstyle ]
      - python-test:
          requires: [ secrets_detection, python_static_analysis, python-checkstyle ]
      - skaffold-build-push:
          context: cera-vault-oidc
          requires: [ java-test-and-code-cov, python-test ]
      - deploy:
          name: Deploy Dev
          requires: [ skaffold-build-push ]
          context: [ compass-integration-bank-of-aion, cera-vault-oidc ]
          post-steps:
            - compass/notify_deployment:
                token_name: COMPASS_CCI_TOKEN
                environment_type: development
      - e2e:
          requires: [ Deploy Dev ]
      - deploy:
          name: Deploy Production
          requires: [ e2e ]
          boa-environment: prod
          context: [ compass-integration-bank-of-aion, cera-vault-oidc-prod ]
          filters:
            branches:
              only: [ main ]
          post-steps:
            - compass/notify_deployment:
                token_name: COMPASS_CCI_TOKEN
                environment_type: production
                environment: CERA-Cluster-Namer-Prod

jobs:
  python-checkstyle:
    executor: python38
    steps:
      - checkout
      - run: pip install pylint
      - run:
          name: Lint Python
          command: pylint --rcfile=./.pylintrc ./src/*/*.py
  python-test:
    executor: python38
    steps:
      - checkout
      - run: mkdir test-reports
      - run:
          name: Test Python Services
          command: |
            for SERVICE in "contacts" "userservice"; do
              echo "testing $SERVICE..."
              # save current working dir to memory and cd to src/$SERVICE
              pushd src/$SERVICE
                python3 -m venv $HOME/venv-$SERVICE
                source $HOME/venv-$SERVICE/bin/activate
                pip install --upgrade pip
                pip install -r requirements.txt
                python -m pytest --junit-xml=../../test-reports/report-${SERVICE}.xml -v -p no:warnings
                deactivate
              # return to previously saved path
              popd
            done
      - store_test_results:
          path: test-reports
      - store_artifacts:
          path: test-reports
  java-checkstyle:
    executor: jdk17
    steps:
      - checkout
      - maven/with_cache:  
          verify_dependencies: false       
          steps: 
          - run: ./mvnw checkstyle:check
  java-test-and-code-cov:
    executor: jdk17
    steps:
      - checkout
      - run: mkdir test-reports
      - restore_cache:
          keys:
            - v2-mvn-full-{{ .Branch }}
            - v2-mvn-full-
      - run: mvn dependency:go-offline
      - save_cache:
          key: v2-mvn-full-{{ .Branch }}
          paths:
            - ~/.m2
      - run: |
          ./mvnw test
          for SERVICE in "balancereader" "ledgerwriter" "transactionhistory"; do
          echo "checking $SERVICE..."
          # save current working dir to memory and cd to src/$SERVICE
          pushd src/$SERVICE
          ../../mvnw jacoco:report
          echo "Coverage for $SERVICE:"
          awk -F, \
          '{ instructions += $4 + $5; covered += $5 } END \
          { print covered, "/", instructions, " instructions covered"; \
          print int(100*covered/instructions), "% covered" }' \
          target/site/jacoco/jacoco.csv
          cp target/surefire-reports/*.xml ../../test-reports
          # return to previously saved path
          popd
          done
      - store_test_results:
          path: test-reports
      - store_artifacts:
          path: test-reports
  skaffold-build-push:
      executor: jdk17
      steps:
        - checkout
        - run: |
            curl -Lo skaffold https://storage.googleapis.com/skaffold/releases/latest/skaffold-linux-amd64 && \
            sudo install skaffold /usr/local/bin/
        - load-credentials    
        - setup_remote_docker:
            docker_layer_caching: true
        - restore_cache:
            keys:
              - v2-mvn-full-{{ .Branch }}
              - v2-mvn-full-
        - restore_cache:
            keys:
              - v1-skaffold-{{ .Branch }}
              - v1-skaffold-
        - run: |
            export DOCKER_TAG=build$(git rev-parse HEAD:src)
            echo "${NEXUS_PASSWORD}" | docker login --username ${NEXUS_USERNAME} --password-stdin docker.nexus.cera.circleci-labs.com
            # seems like skaffold jib needs a eird kick, hit me locally, passes on second run
            ./mvnw jib:_skaffold-fail-if-jib-out-of-date -Djib.requiredVersion=1.4.0 --projects src/ledgerwriter --also-make jib:_skaffold-files-v2 --quiet --batch-mode
            mkdir output
            skaffold build --build-concurrency=4 --default-repo=docker.nexus.cera.circleci-labs.com --file-output=output/tags.json
            ls /tmp/
        - save_cache:
            key: v1-skaffold-{{ .Branch }}
            paths:
              - ~/.skaffold/cache
        - persist_to_workspace:
            root: output
            paths: [ 'tags.json' ]
  deploy:
    executor: base
    parameters:
      boa-environment:
        type: string
        default: dev
        description: Environment suffix used by namesapce and SA account name.
    environment:
      BOA_ENV: <<parameters.boa-environment>>
    steps:
      - checkout
      - load-credentials
      - run: echo "Now using ${K8S_USER}@${K8S_NAMESPACE}"
      - run: |
          sudo apt update && sudo apt install kubectl -y
          echo ${K8S_CERT} | base64 -d > ca.crt
          kubectl config set-cluster ${K8S_CLUSTER} --server=${K8S_URL} --certificate-authority=ca.crt
          export DECODED_TOKEN=$(echo ${K8S_TOKEN} | base64 -d) #kubectl prints an encoded value, MUST decode it to work.
          kubectl config set-credentials ${K8S_USER} --token=${DECODED_TOKEN}
          kubectl config set-context default --user=${K8S_USER}  --cluster=${K8S_CLUSTER} --namespace ${K8S_NAMESPACE}
          kubectl config use-context default
          kubectl get serviceaccounts -n ${K8S_NAMESPACE}
      - attach_workspace:
          at: output
      - run: 
          name: Deploy BoA
          command: |
            curl -Lo skaffold https://storage.googleapis.com/skaffold/releases/latest/skaffold-linux-amd64 && \
            sudo install skaffold /usr/local/bin/
            skaffold deploy --default-repo=docker.nexus.cera.circleci-labs.com --namespace=${K8S_NAMESPACE} --build-artifacts=output/tags.json
      - run:
          name: Wait for deployment
          command: |
            kubectl wait deployment -n ${K8S_NAMESPACE} frontend --for condition=Available=True --timeout=90s
      - run: 
          name: Print Frontend URL
          command: kubectl get service frontend -n ${K8S_NAMESPACE} | awk '{print $4}'
  e2e:
    executor: with-chrome
    steps:
      - checkout
      - run: 
          name: Run Cypress Tests
          command: |
            cd ui-tests
            npx cypress run \
            --config baseUrl=https://dev.cera.circleci-labs.com \
            --browser firefox \
            --reporter junit \
            --reporter-options "mochaFile=results/my-test-output-[hash].xml"
      - store_test_results:
          path: ui-tests/results
      - store_artifacts:
          path: ui-tests/cypress/videos
      - store_artifacts:
          path: ui-tests/cypress/screenshots    
  java_static_analysis:
    parameters:
      target-file:
        type: string
    executor: jdk17
    resource_class: small
    steps:
      - checkout
      - snyk/scan:
          severity-threshold: critical
          target-file: << parameters.target-file >>
  python_static_analysis:
    parameters:
      target-file:
        type: string
    executor: python38
    resource_class: small
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            pip install -r << parameters.target-file >>
      - snyk/scan:
          severity-threshold: critical
          target-file: << parameters.target-file >>

commands:
  load-credentials:
    steps:
      - run:
          name: install vault agent (if not present)
          command: |
            vault -h && exit 0 || echo "Installing vault"
            #only runs if vault command avbove failed
            cd /tmp
            wget https://releases.hashicorp.com/vault/1.12.2/vault_1.12.2_linux_amd64.zip
            unzip vault_1.12.2_linux_amd64.zip
            sudo mv vault /usr/local/bin        
            vault -h    
      - run:
          name: Load Credentials from Vault
          command: |
            ROLE=${BOA_ENV:-"dev"} #fallback to dev when empty
            echo "Environment (BOA_ENV ): $BOA_ENV"
            export VAULT_ADDR="https://vault.cera.circleci-labs.com"
            export VAULT_TOKEN=`vault write -field=token auth/jwt/login role=boa-$ROLE-deploy jwt=$CIRCLE_OIDC_TOKEN`
            vault read -format=json secret/data/cluster/boa-pipeline-$ROLE > /tmp/cluster-secret.json
            jq -r '.data.data | to_entries[] | "export K8S_"+(.key | ascii_upcase)+"="+(.value | @sh) ' /tmp/cluster-secret.json >> $BASH_ENV
            vault read -format=json secret/data/nexus/boa-deployer > /tmp/nexus-secret.json
            jq -r '.data.data | to_entries[] | "export NEXUS_"+(.key | ascii_upcase)+"="+(.value | @sh) ' /tmp/nexus-secret.json >> $BASH_ENV
